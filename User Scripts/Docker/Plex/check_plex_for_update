#!/bin/bash

CONTAINER_NAME="Plex-Media-Server"
APPRISE_API_URL="http://your-apprise-server:8000/notify"

# Function to send messages to Apprise API with YAML-style URL list
notify_apprise() {
  local title="$1"
  local message="$2"

  curl -s -X POST "$APPRISE_API_URL" \
    -H "Content-Type: application/json" \
    -d "$(jq -n \
          --arg title "$title" \
          --arg body "$message" \
          --argjson urls '[
            "discord://<webhook_id>/<webhook_token>",
            "gotify://<gotify.domain.tld>/<your-token>"
          ]' \
          '{title: $title, body: $body, urls: $urls}')" > /dev/null
}

# Get current Plex version inside the container
CURRENT_VERSION=$(docker exec "$CONTAINER_NAME" /usr/lib/plexmediaserver/Plex\ Media\ Server --version 2>/dev/null | cut -d" " -f1 | sed 's/^v//')

# Get the latest public release version from Plex API (64-bit Debian build)
LATEST_VERSION=$(curl -s "https://plex.tv/api/downloads/5.json" \
  | jq -r '.computer.Linux.releases[] 
           | select(.build == "linux-x86_64" and .distro == "debian") 
           | .url' \
  | grep -oP '([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+-[a-z0-9]+)' \
  | sort -V \
  | tail -n 1)

notify_apprise "Plex Version Check" "Current: $CURRENT_VERSION
Latest: $LATEST_VERSION"

# Fail safely if we couldn't pull the latest version
if [ -z "$LATEST_VERSION" ]; then
  notify_apprise "Plex Update" "Error: Could not retrieve the latest version from Plex API."
  exit 1
fi

# Only restart if LATEST_VERSION > CURRENT_VERSION
if [ "$(printf "%s\n" "$CURRENT_VERSION" "$LATEST_VERSION" | sort -V | tail -n1)" != "$CURRENT_VERSION" ]; then
  docker restart "$CONTAINER_NAME"
  notify_apprise "Plex Update" "Updated to $LATEST_VERSION
Restarted container: $CONTAINER_NAME"
else
  notify_apprise "Plex Update" "Plex is up to date. No restart needed."
fi
